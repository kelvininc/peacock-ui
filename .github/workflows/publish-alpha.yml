name: publish-alpha
on:
    push:
        branches:
            - alpha
            - beta

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

permissions:
    contents: write # for checkout and tag

jobs:
    publish:
        name: Pre-Release Publish
        runs-on: ubuntu-18.04
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                fetch-depth: "0"
            - name: Setup Node ${{ matrix.node_version }}
              uses: actions/setup-node@v2
              with:
                  node-version: 14

            - name: Git Identity
              run: |
                  git config --global user.name 'github-actions[bot]'
                  git config --global user.email 'github-actions[bot]@users.noreply.github.com'
                  git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Cache node_modules ðŸ“¦
              uses: actions/cache@v2
              env:
                  cache-name: cache-node-modules
              with:
                # npm cache files are stored in `~/.npm` on Linux/macOS
                path: |
                     ~/.npm\
                     node_modules
                     */*/node_modules
                key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
                restore-keys: |
                  ${{ runner.os }}-build-${{ env.cache-name }}-
                  ${{ runner.os }}-build-
                  ${{ runner.os }}-

            - name: Install
              run: npm install

            - name: Get Tag
              run: echo "LAST_VERSION=$(git describe --tags `git rev-list --tags --max-count=1` | tr -d v)" >> $GITHUB_ENV

            - name: Get Current Version
              run: |
                  CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
                  echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

            - name: Set Version
              if: env.CURRENT_VERSION != env.LAST_VERSION
              run: |
                  sed -ie "s/\(\"version\": \"\).[^\"]*/\1$LAST_VERSION/" lerna.json
                  git add lerna.json
                  git commit -m 'chore(release): publish alpha version [skip ci]'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Bootstrap
              run: npm run bootstrap

            - name: Generate Versions (Amend)
              if: env.CURRENT_VERSION != env.LAST_VERSION
              run: |
                  npx lerna version prerelease --yes --conventional-commits --conventional-prerelease --no-changelog --amend --force-publish=*
                  git push origin alpha --force
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Generate Versions
              if: env.CURRENT_VERSION == env.LAST_VERSION
              run: |
                  npx lerna version prerelease --yes --conventional-commits --conventional-prerelease --no-changelog --force-publish=*
                  git push origin alpha --force
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Build
              run: npm run build:packages

            - name: Setting NPM
              run: |
                  npm set registry=https://nexus.kelvininc.com/repository/npm-internal
                  npm set "//nexus.kelvininc.com/:_auth=$USER_AUTH"
              env:
                  USER_AUTH: ${{ secrets.NEXUS_AUTH }}

            - name: Publish to Nexus
              run: |
                  npx lerna publish from-git --yes --canary --force-publish=*
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  USER_AUTH: ${{ secrets.NEXUS_AUTH }}

            - name: Push Tag
              run: git push origin $(git describe --tags --abbrev=0)
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
